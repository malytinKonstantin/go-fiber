// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"time"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (
    username, email, password_hash, full_name, bio
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, username, email, password_hash, full_name, bio, created_at, updated_at
`

type CreateUserParams struct {
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FullName     sql.NullString `json:"full_name"`
	Bio          sql.NullString `json:"bio"`
}

// Creates a new user with the provided information
// Returns the newly created user
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.queryRow(ctx, q.createUserStmt, CreateUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.Bio,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

// Deletes a user with the specified ID
// This operation is irreversible
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, DeleteUser, id)
	return err
}

const GetUser = `-- name: GetUser :one
SELECT id, username, email, password_hash, full_name, bio, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

// Retrieves a user by their ID
// Returns a single user or null if not found
func (q *Queries) GetUser(ctx context.Context, id int32) (Users, error) {
	row := q.queryRow(ctx, q.getUserStmt, GetUser, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const GetUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, full_name, bio, created_at, updated_at FROM users
WHERE username = $1 LIMIT 1
`

// Retrieves a user by their username
// Returns a single user or null if not found
func (q *Queries) GetUserByUsername(ctx context.Context, username string) (Users, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, GetUserByUsername, username)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const SearchUsers = `-- name: SearchUsers :many
SELECT id, username, email, password_hash, full_name, bio, created_at, updated_at
FROM users
WHERE 
    ($1::text IS NULL OR username ILIKE '%' || $1::text || '%')
    AND ($2::text IS NULL OR email ILIKE '%' || $2::text || '%')
    AND ($3::text IS NULL OR full_name ILIKE '%' || $3::text || '%')
    AND ($4::text IS NULL OR bio ILIKE '%' || $4::text || '%')
    AND ($5::timestamptz IS NULL OR created_at >= $5::timestamptz)
    AND ($6::timestamptz IS NULL OR created_at <= $6::timestamptz)
ORDER BY
    CASE 
        WHEN $7::text = 'username_asc' THEN username
        WHEN $7::text = 'email_asc' THEN email
        WHEN $7::text = 'created_at_asc' THEN NULL
        WHEN $7::text = 'id_asc' THEN NULL
    END ASC,
    CASE 
        WHEN $7::text = 'username_desc' THEN username
        WHEN $7::text = 'email_desc' THEN email
        WHEN $7::text = 'created_at_desc' THEN NULL
        WHEN $7::text = 'id_desc' THEN NULL
    END DESC,
    CASE WHEN $7::text = 'created_at_asc' THEN created_at END ASC,
    CASE WHEN $7::text = 'id_asc' THEN id END ASC,
    CASE WHEN $7::text = 'created_at_desc' THEN created_at END DESC,
    CASE WHEN $7::text = 'id_desc' THEN id END DESC,
    id ASC -- Always fallback sort by id
LIMIT $9::int
OFFSET $8::int
`

type SearchUsersParams struct {
	Username    string        `json:"username"`
	Email       string        `json:"email"`
	FullName    string        `json:"full_name"`
	Bio         string        `json:"bio"`
	CreatedFrom **time.Time   `json:"created_from"`
	CreatedTo   **time.Time   `json:"created_to"`
	SortBy      string        `json:"sort_by"`
	OffsetParam sql.NullInt32 `json:"offset_param"`
	LimitParam  sql.NullInt32 `json:"limit_param"`
}

// Searches for users based on various criteria
// Supports partial matching and date range for created_at
// Allows sorting by different fields in ascending or descending order
// Returns a paginated list of users
func (q *Queries) SearchUsers(ctx context.Context, arg SearchUsersParams) ([]Users, error) {
	rows, err := q.query(ctx, q.searchUsersStmt, SearchUsers,
		arg.Username,
		arg.Email,
		arg.FullName,
		arg.Bio,
		arg.CreatedFrom,
		arg.CreatedTo,
		arg.SortBy,
		arg.OffsetParam,
		arg.LimitParam,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Users{}
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.PasswordHash,
			&i.FullName,
			&i.Bio,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = COALESCE($1, username),
    email = COALESCE($2, email),
    password_hash = COALESCE($3, password_hash),
    full_name = COALESCE($4, full_name),
    bio = COALESCE($5, bio),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $6
RETURNING id, username, email, password_hash, full_name, bio, created_at, updated_at
`

type UpdateUserParams struct {
	Username     string         `json:"username"`
	Email        string         `json:"email"`
	PasswordHash string         `json:"password_hash"`
	FullName     sql.NullString `json:"full_name"`
	Bio          sql.NullString `json:"bio"`
	ID           int32          `json:"id"`
}

// Updates user information for the specified user ID
// Only updates non-null fields, leaving others unchanged
// Returns the updated user information
func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error) {
	row := q.queryRow(ctx, q.updateUserStmt, UpdateUser,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.FullName,
		arg.Bio,
		arg.ID,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.FullName,
		&i.Bio,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
